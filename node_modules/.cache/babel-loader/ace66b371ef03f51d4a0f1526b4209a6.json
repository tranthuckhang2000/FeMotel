{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst path = \"http://localhost:3000/\";\nconst initialState = {\n  motelMotel: [],\n  isLoading: true,\n  error: \"\"\n};\nconst motelSlice = createSlice({\n  name: \"product\",\n  initialState,\n  reducers: {\n    getStart: state => {\n      state.isLoading = true;\n    },\n    getSuccess: (state, action) => {\n      state.isLoading = false;\n      state.motelMotel = action.payload; // console.log(\"reducer: sent\");\n    },\n    getError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  getStart,\n  getError,\n  getSuccess\n} = motelSlice.actions;\nexport const savePost = (title, phone, price, square, address, des) => async dispatch => {\n  try {\n    dispatch(getStart());\n    const obj = {\n      name: \"Ha Anh Tuan\",\n      job: \"single\",\n      old: 37\n    };\n    const res = await axios({\n      method: \"post\",\n      url: `${path}motels`,\n      data: {\n        title,\n        phone,\n        price,\n        square,\n        address,\n        des\n      }\n    });\n    dispatch(getSuccess(res.data));\n    console.log(res.data);\n  } catch (err) {\n    dispatch(getError(err));\n  }\n};\nexport const getAllMotel = () => async dispatch => {\n  try {\n    dispatch(getStart());\n    const res = await axios.get(`${path}motels`, {});\n    dispatch(getSuccess(res.data));\n  } catch (err) {\n    dispatch(getError(err));\n  }\n};\nexport default motelSlice.reducer;","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FeMotel/src/reducers/Motel.Reducer.js"],"names":["createSlice","axios","path","initialState","motelMotel","isLoading","error","motelSlice","name","reducers","getStart","state","getSuccess","action","payload","getError","actions","savePost","title","phone","price","square","address","des","dispatch","obj","job","old","res","method","url","data","console","log","err","getAllMotel","get","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,IAAI,GAAG,wBAAb;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,UAAU,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,SADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRO,IAAAA,UAAU,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC7BF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACP,UAAN,GAAmBS,MAAM,CAACC,OAA1B,CAF6B,CAG7B;AACD,KARO;AASRC,IAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC3BF,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAArB;AACD;AAZO;AAHmB,CAAD,CAA9B;AAmBA,OAAO,MAAM;AAAEJ,EAAAA,QAAF;AAAYK,EAAAA,QAAZ;AAAsBH,EAAAA;AAAtB,IAAqCL,UAAU,CAACS,OAAtD;AAEP,OAAO,MAAMC,QAAQ,GACnB,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,OAA9B,EAAuCC,GAAvC,KAA+C,MAAOC,QAAP,IAAoB;AACjE,MAAI;AACFA,IAAAA,QAAQ,CAACd,QAAQ,EAAT,CAAR;AACA,UAAMe,GAAG,GAAG;AACVjB,MAAAA,IAAI,EAAE,aADI;AAEVkB,MAAAA,GAAG,EAAE,QAFK;AAGVC,MAAAA,GAAG,EAAE;AAHK,KAAZ;AAKA,UAAMC,GAAG,GAAG,MAAM3B,KAAK,CAAC;AACtB4B,MAAAA,MAAM,EAAE,MADc;AAEtBC,MAAAA,GAAG,EAAG,GAAE5B,IAAK,QAFS;AAGtB6B,MAAAA,IAAI,EAAE;AACJb,QAAAA,KADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA,KAHI;AAIJC,QAAAA,MAJI;AAKJC,QAAAA,OALI;AAMJC,QAAAA;AANI;AAHgB,KAAD,CAAvB;AAYAC,IAAAA,QAAQ,CAACZ,UAAU,CAACgB,GAAG,CAACG,IAAL,CAAX,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACG,IAAhB;AACD,GArBD,CAqBE,OAAOG,GAAP,EAAY;AACZV,IAAAA,QAAQ,CAACT,QAAQ,CAACmB,GAAD,CAAT,CAAR;AACD;AACF,CA1BI;AA2BP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOX,QAAP,IAAoB;AACnD,MAAI;AACFA,IAAAA,QAAQ,CAACd,QAAQ,EAAT,CAAR;AACA,UAAMkB,GAAG,GAAG,MAAM3B,KAAK,CAACmC,GAAN,CAAW,GAAElC,IAAK,QAAlB,EAA2B,EAA3B,CAAlB;AACAsB,IAAAA,QAAQ,CAACZ,UAAU,CAACgB,GAAG,CAACG,IAAL,CAAX,CAAR;AACD,GAJD,CAIE,OAAOG,GAAP,EAAY;AACZV,IAAAA,QAAQ,CAACT,QAAQ,CAACmB,GAAD,CAAT,CAAR;AACD;AACF,CARM;AAUP,eAAe3B,UAAU,CAAC8B,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst path = \"http://localhost:3000/\";\nconst initialState = {\n  motelMotel: [],\n  isLoading: true,\n  error: \"\",\n};\n\nconst motelSlice = createSlice({\n  name: \"product\",\n  initialState,\n  reducers: {\n    getStart: (state) => {\n      state.isLoading = true;\n    },\n    getSuccess: (state, action) => {\n      state.isLoading = false;\n      state.motelMotel = action.payload;\n      // console.log(\"reducer: sent\");\n    },\n    getError: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { getStart, getError, getSuccess } = motelSlice.actions;\n\nexport const savePost =\n  (title, phone, price, square, address, des) => async (dispatch) => {\n    try {\n      dispatch(getStart());\n      const obj = {\n        name: \"Ha Anh Tuan\",\n        job: \"single\",\n        old: 37,\n      };\n      const res = await axios({\n        method: \"post\",\n        url: `${path}motels`,\n        data: {\n          title,\n          phone,\n          price,\n          square,\n          address,\n          des,\n        },\n      });\n      dispatch(getSuccess(res.data));\n      console.log(res.data);\n    } catch (err) {\n      dispatch(getError(err));\n    }\n  };\nexport const getAllMotel = () => async (dispatch) => {\n  try {\n    dispatch(getStart());\n    const res = await axios.get(`${path}motels`, {});\n    dispatch(getSuccess(res.data));\n  } catch (err) {\n    dispatch(getError(err));\n  }\n};\n\nexport default motelSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}